// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_logit_matrix
arma::mat get_logit_matrix(const arma::mat& x);
RcppExport SEXP _BiSSLB_get_logit_matrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(get_logit_matrix(x));
    return rcpp_result_gen;
END_RCPP
}
// get_lambdastar_double
double get_lambdastar_double(double x, double thetas, const arma::vec& lambdas);
RcppExport SEXP _BiSSLB_get_lambdastar_double(SEXP xSEXP, SEXP thetasSEXP, SEXP lambdasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdas(lambdasSEXP);
    rcpp_result_gen = Rcpp::wrap(get_lambdastar_double(x, thetas, lambdas));
    return rcpp_result_gen;
END_RCPP
}
// get_lambdastar_matrix
arma::mat get_lambdastar_matrix(const arma::mat& x, const arma::vec& thetas, const arma::vec& lambdas);
RcppExport SEXP _BiSSLB_get_lambdastar_matrix(SEXP xSEXP, SEXP thetasSEXP, SEXP lambdasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdas(lambdasSEXP);
    rcpp_result_gen = Rcpp::wrap(get_lambdastar_matrix(x, thetas, lambdas));
    return rcpp_result_gen;
END_RCPP
}
// g
double g(double x, double theta, double eta, const arma::vec& lambdas);
RcppExport SEXP _BiSSLB_g(SEXP xSEXP, SEXP thetaSEXP, SEXP etaSEXP, SEXP lambdasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdas(lambdasSEXP);
    rcpp_result_gen = Rcpp::wrap(g(x, theta, eta, lambdas));
    return rcpp_result_gen;
END_RCPP
}
// get_delta
double get_delta(double theta, double eta, const arma::vec& lambdas);
RcppExport SEXP _BiSSLB_get_delta(SEXP thetaSEXP, SEXP etaSEXP, SEXP lambdasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdas(lambdasSEXP);
    rcpp_result_gen = Rcpp::wrap(get_delta(theta, eta, lambdas));
    return rcpp_result_gen;
END_RCPP
}
// soft_thresholding
double soft_thresholding(double x, double lambdastar, double eta, double delta);
RcppExport SEXP _BiSSLB_soft_thresholding(SEXP xSEXP, SEXP lambdastarSEXP, SEXP etaSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lambdastar(lambdastarSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(soft_thresholding(x, lambdastar, eta, delta));
    return rcpp_result_gen;
END_RCPP
}
// update_A_B
void update_A_B(arma::mat& A, arma::mat& B, const arma::mat& Y, double eta, double xi, const arma::vec& mu, const arma::mat& A_momentum, const arma::mat& B_momentum, const arma::vec& tilde_lambdas, const arma::vec& lambdas, const arma::vec& tilde_thetas, const arma::vec& thetas);
RcppExport SEXP _BiSSLB_update_A_B(SEXP ASEXP, SEXP BSEXP, SEXP YSEXP, SEXP etaSEXP, SEXP xiSEXP, SEXP muSEXP, SEXP A_momentumSEXP, SEXP B_momentumSEXP, SEXP tilde_lambdasSEXP, SEXP lambdasSEXP, SEXP tilde_thetasSEXP, SEXP thetasSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A_momentum(A_momentumSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B_momentum(B_momentumSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tilde_lambdas(tilde_lambdasSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tilde_thetas(tilde_thetasSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type thetas(thetasSEXP);
    update_A_B(A, B, Y, eta, xi, mu, A_momentum, B_momentum, tilde_lambdas, lambdas, tilde_thetas, thetas);
    return R_NilValue;
END_RCPP
}
// rescale_A_B
void rescale_A_B(mat& A, mat& B);
RcppExport SEXP _BiSSLB_rescale_A_B(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< mat& >::type B(BSEXP);
    rescale_A_B(A, B);
    return R_NilValue;
END_RCPP
}
// get_thetas
List get_thetas(const arma::mat& mat, double alpha, double beta, double tol);
RcppExport SEXP _BiSSLB_get_thetas(SEXP matSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(get_thetas(mat, alpha, beta, tol));
    return rcpp_result_gen;
END_RCPP
}
// get_logLikelihood
List get_logLikelihood(const arma::mat& Y, double xi, const arma::vec mu, const arma::mat& A, const arma::mat& B, const arma::vec& tilde_thetas, const arma::vec& thetas, const arma::vec& tilde_lambdas, const arma::vec& lambdas, double tilde_alpha, double tilde_beta, double alpha, double beta);
RcppExport SEXP _BiSSLB_get_logLikelihood(SEXP YSEXP, SEXP xiSEXP, SEXP muSEXP, SEXP ASEXP, SEXP BSEXP, SEXP tilde_thetasSEXP, SEXP thetasSEXP, SEXP tilde_lambdasSEXP, SEXP lambdasSEXP, SEXP tilde_alphaSEXP, SEXP tilde_betaSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tilde_thetas(tilde_thetasSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tilde_lambdas(tilde_lambdasSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< double >::type tilde_alpha(tilde_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type tilde_beta(tilde_betaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_logLikelihood(Y, xi, mu, A, B, tilde_thetas, thetas, tilde_lambdas, lambdas, tilde_alpha, tilde_beta, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// main_iterations
List main_iterations(arma::vec mu, arma::mat A, arma::mat B, arma::vec tilde_thetas, arma::vec thetas, arma::mat Y, double xi, double eta, arma::vec tilde_lambdas, arma::vec lambdas, double tilde_alpha, double tilde_beta, double alpha, double beta, double tol, int max_iter, int IBP, int I, int J);
RcppExport SEXP _BiSSLB_main_iterations(SEXP muSEXP, SEXP ASEXP, SEXP BSEXP, SEXP tilde_thetasSEXP, SEXP thetasSEXP, SEXP YSEXP, SEXP xiSEXP, SEXP etaSEXP, SEXP tilde_lambdasSEXP, SEXP lambdasSEXP, SEXP tilde_alphaSEXP, SEXP tilde_betaSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP tolSEXP, SEXP max_iterSEXP, SEXP IBPSEXP, SEXP ISEXP, SEXP JSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tilde_thetas(tilde_thetasSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tilde_lambdas(tilde_lambdasSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< double >::type tilde_alpha(tilde_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type tilde_beta(tilde_betaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< int >::type IBP(IBPSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    rcpp_result_gen = Rcpp::wrap(main_iterations(mu, A, B, tilde_thetas, thetas, Y, xi, eta, tilde_lambdas, lambdas, tilde_alpha, tilde_beta, alpha, beta, tol, max_iter, IBP, I, J));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BiSSLB_get_logit_matrix", (DL_FUNC) &_BiSSLB_get_logit_matrix, 1},
    {"_BiSSLB_get_lambdastar_double", (DL_FUNC) &_BiSSLB_get_lambdastar_double, 3},
    {"_BiSSLB_get_lambdastar_matrix", (DL_FUNC) &_BiSSLB_get_lambdastar_matrix, 3},
    {"_BiSSLB_g", (DL_FUNC) &_BiSSLB_g, 4},
    {"_BiSSLB_get_delta", (DL_FUNC) &_BiSSLB_get_delta, 3},
    {"_BiSSLB_soft_thresholding", (DL_FUNC) &_BiSSLB_soft_thresholding, 4},
    {"_BiSSLB_update_A_B", (DL_FUNC) &_BiSSLB_update_A_B, 12},
    {"_BiSSLB_rescale_A_B", (DL_FUNC) &_BiSSLB_rescale_A_B, 2},
    {"_BiSSLB_get_thetas", (DL_FUNC) &_BiSSLB_get_thetas, 4},
    {"_BiSSLB_get_logLikelihood", (DL_FUNC) &_BiSSLB_get_logLikelihood, 13},
    {"_BiSSLB_main_iterations", (DL_FUNC) &_BiSSLB_main_iterations, 19},
    {NULL, NULL, 0}
};

RcppExport void R_init_BiSSLB(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
