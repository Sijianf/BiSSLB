#ifndef BISSLB_H
#define BISSLB_H

#include <RcppArmadillo.h>

// Function declarations with fully qualified types

arma::mat get_logit_matrix(const arma::mat& x);

double get_lambdastar_double(double x, double thetas, const arma::vec& lambdas);

arma::mat get_lambdastar_matrix(const arma::mat& x, const arma::vec& thetas, const arma::vec& lambdas);

double g(double x, double theta, double eta, const arma::vec& lambdas);

double get_delta(double theta, double eta, const arma::vec& lambdas);

double soft_thresholding(double x, double lambdastar, double eta, double delta);

void update_A_B(arma::mat& A, arma::mat& B,
                const arma::mat& Y, double eta, double xi, const arma::vec& mu,
                const arma::mat& A_momentum, const arma::mat& B_momentum,
                const arma::vec& tilde_lambdas, const arma::vec& lambdas,
                const arma::vec& tilde_thetas, const arma::vec& thetas);

void update_mu(arma::vec& mu,
               const arma::mat& A, const arma::mat& B,
               const arma::mat& Y, double eta, double xi);

void rescale_A_B(arma::mat& A, arma::mat& B);

Rcpp::List get_thetas(const arma::mat& mat, double alpha, double beta, double tol);

Rcpp::List get_logLikelihood(const arma::mat& Y, double xi, const arma::vec mu,
                             const arma::mat& A, const arma::mat& B,
                             const arma::vec& tilde_thetas, const arma::vec& thetas,
                             const arma::vec& tilde_lambdas, const arma::vec& lambdas,
                             double tilde_alpha, double tilde_beta, double alpha, double beta);

#endif  // BISSLB_H
